---
title: "PEC1: Liver mRNA microarray study for mice treated with various diets"
author: "Marc Garcia"
date: "7/4/2020"
output:
  html_document:
    theme: spacelab
    toc: yes
    toc_float: yes
  pdf_document:
    toc: yes
header-includes:
  - \usepackage{booktabs}
bibliography: bibliography.bib
link-citations: yes
---

```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(root.dir = "C:/Users/USER/Documents/Màster Bioestadística i Bioinfo/Análisis de datos Ómicos/PECS/ADO_PEC1_Marc_Garcia/")
options(knitr.kable.NA = '')

```

* * *

<div align = "justify">

<style>
    body .main-container {
        max-width: 1550px;
    }
    
</style>

# Abstract

<br>

A día de hoy, la relación causal entre la dieta y las complicaciones hepáticas continúa siendo una incógnita. En este estudio, se pretende investigar los efectos de 8 dietas sobre la expresión de genes relacionados con las vías metabólicas intermedias del hígado. Para ello, se han utilizado ejemplares masculinos adultos de ratón que han sido alimentados durante 3 semanas con la dieta correspondiente (3 por grupo) y de los cuales se han extraído muestras de tejido hepático. La expresión en estas muestras ha sido determinada mediante microarrays de un color de Affymetrix (*Affymetrix Mouse 430 2.0 Gene*). El procesado de los datos y la búsqueda de genes diferencialmente expresados (DEG) respecto al control se ha realizado mediante el uso del software estadístico [R](https://cran.r-project.org/index.html) (versión 3.6.2) y de paquetes del proyecto [BioConductor](https://www.bioconductor.org/) (versión 3.10). Los datos y el código relacionados con el análisis pueden ser consultados en el siguiente [repositorio GitHub](https://github.com/marcgarcia9385/pec1-ado-marc-garcia.git).
 	
<br>

# Objetivos

<br>

El objetivo del estudio es aportar nueva información y mejorar el conocimiento del efecto que tiene la dieta sobre la expresión, en hepatocitos, de genes relacionados con el metabolismo lipídico, la inflamación y el estrés oxidativo. En esta dirección, se pretende identificar que genes y que vías metabólicas están diferencialmente expresados en cada dieta respecto al control (AIN-93M). 

<br>

# Materiales & Métodos

<br>

## Materiales

<br>

### Software

<br>

Aunque existe una gran variedad de software que permite analizar datos procedentes de estudios realizados con microarrays [@Mehta2011], nosotros nos hemos decantado por la combinación de `R` (versión 3.6.2) y `BioConductor` (versión 3.10). Además, para facilitar el procesado y hacerlo más cómodo visualmente, hemos utilizado la interfaz `R-Studio`. En la *Tabla 1* se muestra un listado con los paquetes implementados durante el análisis.

<br>

```{r packages list, echo=F, warning=F, message=F}

library(knitr)
library(kableExtra)
library(readxl)

packages <- read_xlsx(path = "other/packages.xlsx")

kable(x = packages,
      format = "html",
      align = "ccccccc") %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, color = "white", background = "#482677FF") %>%
   scroll_box(width = "100%", height = "400px")

```

<br>

**Tabla 1:** lista de paquetes utilizados durante el análisis.

<br>

### Datos

<br>

Los datos utilizados para el análisis provienen de un estudio publicado por @Renaud2014. Estos, se encuentran disponibles en la base de datos GEO (*Gene Expression Omnibus*), un servidor web que subministra, entre otros, datos relacionados con experimentos realizados con microarrays. Desde GEO, podemos acceder a nuestros datos mediante el código alfanumérico siguiente: [GSE51885](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE51885). Además, una vez abierta la página principal del estudio, podemos descargar los archivos `.CEL` correspondientes a cada uno de los arrays (`GSE51885_RAW.tar`). 

<br>

El estudio que generó estos datos investigaba el efecto, respecto al control, de 8 dietas (*Tabla 2*) en la expresión de genes de las vías metabólicas intermedias del hígado. Para ello, ejemplares de ratones macho adultos (3 réplicas) fueron alimentados durante 3 semanas con una de las dietas siguientes:

<br>

+ **TD.94048 (CT):** AIN-93M purified diet (control diet)

+ **TD.8604 (LAR):** Natural ingredient diet (used in our animal facility) (Lab chow)

+ **TD.89247 (FR):** 60% fructose diet

+ **TD.97070 (HF):** High-fat diet

+ **TD.88137 (AC):** High-saturated fat and sucrose diet (Western diet)

+ **TD.02028 (AR):** High-fat, sucrose, cholesterol, and cholic acid (CA) diet (atherogenic diet)

+ **TD.8422 (EFA):** Essential fatty acid (EFA) deficient diet

+ **TD.00235 + 7% sunflower oil (DHA):** low n-3 diet [@Levant2006]

+ **Diet restriction (DR):** 75% of the diet TD.8604 consumed by ad lib feeding [@Varady2007]

<br>

```{r diet composition, echo=F, warning=F, message=F}

media <- read.csv(file = "other/media composition.csv", 
                  header = T, 
                  sep = ";")

kable(x = media, 
      format = "html",
      align = "ccccccc") %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, color = "white", background = "#482677FF")

```

<br>

**Tabla 2:** composición de 8 de las dietas (incluyendo el control) utilizadas en el estudio. La novena dieta (DR), contiene la misma composición que la dieta LAR.

<br>

A continuación, los ratones fueron eutanizados (8:00-10:00 A.M), obteniéndose muestras de sangre y de tejido hepático. De las muestras de tejido hepático se extrajo y se purificó el ARN total mediante en el uso de los reactivos *RNAzol B* y *RNA Bee* respecitvamente (Tel-Test Inc., Friendswood, TX). Seguidamente, se cuantificó la concentración de ARN ($\lambda$ = 260 nm) utilizando un espectrofotómetro NanoDrop1000 (NanoDrop Technologies, Wilmington, DE) y se evaluó la integridad de las muestras mediante electroforesis. La expresión génica de cada muestra fue determinada mediante el uso de microarrays de un color del tipo *Affymetrix Mouse 430 2.0 Gene*. Todos los protocolos utilizados fueron aprovados por el IACUC (*Institutional Animal Care and Use Committee*).

<br>

En síntesis, nos encontramos frente a un diseño factorial con un factor (**Dieta**) de 9 niveles. Cada nivel conforma una única unidad experimental compuesta de tres réplicas biológicas (3 ratones) y, por lo tanto, el tamaño muestral del experimento es de 27 muestras.

<br>

## Métodos

<br>

El análisis de datos de microarrays se puede realizar siguiendo protocolos muy variables [@Klaus2018; @Depiereux2015; @Gan2014]. En esta sección del informe se intenta resumir el *workflow* estándar de uno de estos análisis proponiendo métodos específicos para cada uno de los pasos. 

<br>

### Preparando el entorno de trabajo

<br>

Para facilitar el análisis, intentaremos almacenar todos los datos de origen y los resultados generados siguiendo un criterio lógico de ordenación. En esta dirección, crearemos un pequeño subconjunto de directorios dentro de nuestro directorio de trabajo (*`r getwd()`*). Básicamente este subconjunto estará formado por los cuatro directorios siguientes:

<br>

+ **data:** contendrá los 27 archivos `.CEL` y el archivo `targets`.
+ **results:** contendrá los resultados generados durante el análisis. Esto incluye, entre otros, los informes de los controles de calidad o las matrices de expresión.
+ **figures:** aquí guardaremos las figuras generadas durante el análisis.
+ **other:** incluirá otro tipo de contenido como las tablas con la composición de las dietas y los paquetes utilizados.

<br>

### Leyendo los datos

<br>

La preparación de los datos para su análisis implica, normalmente, un primer paso que consiste en la construcción de un objeto de tipo `ExpressionSet` a partir de los ficheros `.CEL` y el archivo `targets.csv`. Los primeros contienen los valores de fluorescencia de cada array (*raw data*) mientras que el segundo (*Tabla 3*) relaciona cada array con la muestra y el grupo al que pertenece y las covariables que lo definen. Nosotros, para generar este objeto, nos ayudaremos de función `read.celfiles()` del paquete `oligo` [@Carvalho2010].

<br>

```{r targets file, echo=F}

targets <- read.csv(file = "data/targets.csv", 
                    header = T,
                    sep = ";")

kable(x = targets,
      format = "html",
      align = "ccccccc") %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, color = "white", background = "#482677FF") %>%
  scroll_box(width = "100%", height = "450px")

```

<br>

**Tabla 3:** contenido del fichero `targets.csv`.

<br>

### Control de calidad (raw data)

<br>

Una vez creado el `ExpressionSet` con los "datos crudos", es necesario realizar un primer control para determinar si nuestros datos tienen la calidad suficiente para ser normalizados y posteriormente analizados. Aunque existen gran cantidad de métodos alternativos, una opción muy interesante consiste en utilizar la función `arrayQualityMetrics()` del paquete con el mismo nombre [@Kauffmann2009]. Básicamente, esta función realiza el control de calidad automáticamente y crea un nuevo directorio con los resultados. Este directorio incluye, además de las figuras correspondientes a cada una de las pruebas, un informe dinámico en formato html (`index.html`). Para complementar el output de `arrayQualityMetrics()`, generaremos un boxplot y un PCA plot. Mientras que para el boxplot utilizaremos la función `boxplot()` del paquete `stats` [@RCore2019], para el PCA plot crearemos nuestra propia función (*Figura S1*).

<br>

### Normalización

<br>

Una vez eliminados los arrays defectuosos se deben normalizar los datos. De este modo, minimizaremos la variabilidad de las muestras debida a razones no biológicas y permitiremos la comparación entre chips. Nosotros hemos aplicado el método RMA (*Robust Multichip Average*), uno de los más extendidos y utilizados entre la comunidad científica [@Irizarry2003]. Para implementarlo hemos hecho uso de la función `rma()` del paquete `oligo` [@Carvalho2010].

<br>

### Control de calidad (normalized data)

<br>

Aunque no es imprescindible, después de la normalización de los datos, podemos realizar un segundo control de calidad que determine si la normalización ha funcionado. De nuevo, utilizaremos la función `arrayQualityMetrics()` y combinaremos su output con un PCA plot y un boxplot que elaboraremos nosotros manualmente.

<br>

### Filtrando los genes menos variables

<br>

Previamente a la selección de genes diferencialmente expresados, con el objetivo de minimizar el problema de la multiplicidad de tests, es común eliminar aquellos *probesets/tránscritos* de los cuales no se espera que presenten diferencias entre grupos. Normalmente, el modus operandi consiste en construir un primer gráfico (**SD plot**) de la desviación estándar total de cada *probeset/tránscrito* contra su posición en el ranking de variabilibad (de menos a más variable). De este modo, podemos establecer un punto de corte que determinará la proporción que nos quedaremos y la proporción que eliminaremos. Una vez establecido este *threshold*, nosotros utilizaremos la función `nsFilter()` del paquete `genefilter` [@Gentleman2019] para hacer el filtrado. Adicionalmente, si así lo deseamos, podemos eliminar también mediante esta función los *probesets* duplicados o aquellos para los cuales no se dispone de anotación. 

<br>

### Selección de genes (DEG)

<br>

Con la intención de identificar que genes estan diferencialmente expresados entre cada una de las dietas y el control, podemos utilizar diferentes enfoques [@Chrominski2015]. Para comparaciones entre dos condiciones o grupos se han utilizado clásicamente pruebas t o variantes de ellas [@Tsai2003; @Draghici2001]. Sin embargo, los modelos lineales basados en el análisis de la varianza funcionan cuando establecemos una comparación entre más de dos grupos y además han demostrado ser significativamente más robustos que las pruebas t [@Smyth2004]. Nosotros, para este análisis utilitzaremos el paquete de Bioconductor `limma` [@Smyth2015]. A continuación se describen brevemente todos los pasos necesarios para generar el modelo lineal e identificar y visualizar aquellos genes que presentan una expresión diferencial entre comparaciones.

<br>

#### Matriz de diseño 

<br>

El primer paso es la construcción de la matriz de diseño, una tabla que muestra la localización de cada una de las muestras respecto a los grupos o unidades experimentales (*Tabla 4*). Para construirla utilizaremos la función `model.matrix()` del paquete `stats` [@RCore2019].

<br>

```{r design matrix, echo=F}

contrasts <- read.csv(file = "other/designMatrix.csv", 
                      header = T,
                      sep = ",")

kable(x = contrasts,
      format = "html",
      align = "ccccccc") %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, color = "white", background = "#482677FF") %>%
   scroll_box(width = "100%", height = "300px")

```

<br>

**Tabla 4:** matriz de diseño que incluye la localización de las muestras respecto a cada grupo.

<br>

#### Matriz de contrastes

<br>

La matriz de contrastes se utiliza para describir cada uno de los contrastes que queremos realizar. Sus filas corresponden a las columnas de la matriz de diseño y sus columnas a los contrastes especificados. Los elementos involucrados en cada uno de los contrastes se marcan con 1s y -1s. Nosotros, para construir esta matriz, utilizaremos la función `makeContrasts()` del paquete `limma` [@Smyth2015]. Los contrastes definidos en este estudio se muestran en la *Tabla 5*.

<br>

```{r contrasts matrix, echo=F}

contrasts <- read.csv(file = "other/contrastMatrix.csv", 
                      header = T,
                      sep = ",")

kable(x = contrasts,
      format = "html",
      align = "ccccccc") %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, color = "white", background = "#482677FF")

```

<br>

**Tabla 5:** matriz de contrastes que incluye todos los contrastes que hemos realizado durante el análisis.

<br>

#### Construcción del modelo

<br>

A continuación, para la construcción del modelo lineal, utilizaremos una sucesión de tres funciones del paquete `limma`: `lmFit()`, `contrasts.fit()` y `eBayes()` respectivamente [@Smyth2015]. Estas tres funciones reciben como argumentos el `ExpressionSet` con los datos normalizados y filtrados, la matriz de diseño y la matriz de contrastes, generando un objeto de tipo `MArrayLM`.

<br>

#### Obtención de listas de genes diferencialmente expresados

<br>

El paquete `limma` [@Smyth2015] incluye una función muy útil que nos permite visualizar los genes diferencialmente expresados (y los que no lo están) de cada una de las comparaciones definidas por la matriz de contrastes. Nos referimos a la conocida función `topTable()`. Como veremos posteriormente, esta función genera tablas que contienen, para cada gen, información sobre la diferencia entre las medias grupales (**logFC**), la expresión media de todas las muestras (**AveExpr**), el valor del estadístico t (**t**), el p-valor (**P.Value**), el p-valor ajustado (**adj.P.Val**) y el valor del estadístico B (**B**). Si ordenamos los genes por p-valor o p-valor ajustado (orden ascendiente), podremos visualizar aquellos genes con una mayor evidencia de estar diferencialmente expresados. 

<br>

#### Anotación de genes

<br>

Las tablas generadas mediante la función `topTable()` contienen únicamente los identificadores numéricos de los *probesets*/*tránscritos* seleccionados. Sin embargo carecen de información adicional sobre los genes a los cuales pertenecen estos identificadores. Con el objetivo de relacionar cada identificador con un gen y poblar las toptables con esta información, hemos generado la función `annotatedTopTable()` (*Figura S2*). Esta función recibe como argumentos la toptable a anotar y el paquete de anotaciones correspondiente (`mouse4302.db`) [@Carlson2016], añadiendo a las toptables los *probeid*, los símbolos de los genes, sus referencias *ENTREZID* y sus nombres enteros.

<br>

#### Visualización de la expresión diferencial (volcano plots)

<br>

La visualización del contenido de las toptables se puede realizar fácilmente mediante **volcano plots**. Estos gráficos relacionan el cambio de expresión entre condiciones (log2 FoldChange) con la evidencia estadística (-log10(P-value)), siendo aquellos genes con valores más extremos en el eje x y con valores superiores en el eje y los que tienen una evidencia más fuerte de estar diferencialmente expresados. Una de las funciones más utilizadas para su construcción es `volcanoplot()` del paquete `limma` [@Smyth2015]. Aún siendo una buena solución, nosotros hemos preferido emplear la función `EnhancedVolcano()` del paquete con el mismo nombre [@Blighe2019]. A diferencia de `volcanoplot()`, `EnhancedVolcano()` permite dibujar el FDR y los logFC *cutoffs*, diferenciando las 4 categorías de genes que nos podemos encontrar mediante una paleta de colores. De este modo, es mucho más fácil identificar que genes presentan evidencia de estar diferencialmente expresados y establecer comparaciones entre los resultados de cada una de las comparaciones.

<br>

#### Clustering (heatmap)

<br>

Una vez obtenida la lista de genes diferencialmente expresados al menos en una de las comparaciones, podemos utilizar técnicas de clustering para construir un heatmap que nos permita identificar que muestras o grupos presentan unos patrones de expresión más similares entre ellos. De este modo podremos definir clústers cuyo contenido podrá ser utilizado para posteriores análisis. Aunque no es la única opción, nosotros utilizaremos la fución `heatmap.2()` del paquete `gplots` [@Warnes2020]. Esta función recibe como input el subset del `ExpressionSet` filtrado correspondiente a los genes de la lista que hemos comentado.

<br>

#### Comparaciones múltiples (Venn plots)

<br>

Ahora que ya conocemos que genes están diferencialmente expresados en almenos una de las comparaciones y, además, hemos agrupado los grupos en clústers, podemos identificar cuantos genes diferencialmente expresados respecto al control comparten los grupos de los mismos clústers. Con este objetivo, después de construir una *summary table* mediante la función `decideTests()` del paquete `limma` [@Smyth2015], construiremos una serie de Venn plots. Para los Venn plots utilizaremos la función `vennDiagram()`, también del paquete `limma`.

<br>

### Análisis de pathways 

<br>

Resulta mucho más interesante y fácilmente interpretable estudiar, en vez de los genes uno por uno, que vías metabólicas están diferencialmente expresadas en cada grupo respecto al control. Para obtener esta información debemos realizar lo que se conoce como **análisis de significación** o **análisis de pathways**. 

<br>

#### Obtención de listas de vías metabólicas diferencialmente expresados

<br>

Aunque no son la única alternativa, los paquetes `ReactomePA` [@Yu2016] y `DOSE` [@Yu2015] disponen de funciones que nos permiten generar, para cada comparación, tablas que muestran las vías que presentan evidencias significativas de estar diferencialmente expresadas. Estas tablas, a las que nos vamos a referir como **pathway tables** contienen, para cada vía, su identificador alfa-numérico (**ID**), una corta descripción (**Description**), la proporción de genes differencialmente expresados de la comparación que están incluidos en esta vía (**GeneRatio**), el p-valor (**pvalue**), el p-valor ajustado (**p.adjust**) y el q-valor (**qvalue**). Si ordenamos las vías por p-valor o p-valor ajustado (orden ascendiente), podremos visualizar aquellas con una mayor evidencia de estar diferencialmente expresadas. 

<br>

#### Visualización de la expresión diferencial (cnetplots)

<br>

Una opción muy interesante para representar el contenido de las pathway tables consiste en construir cnetplots mediante la función `cnetplot()` del paquete `enrichplot` [@Yu2019]. Estos gráficos tienen una estructura en forma de red que permite, además de visualizar que vías metabólicas presentan una mayor evidencia de estar diferencialmente expresadas, identificar las conexiones entre genes que pertenecen a más de una vía. Adicionalmente, si así se desea, también permite classificar, mediante una escala de color, aquellos genes que están sobrexpresados o infraexpresados.

<br>

# Resultados

<br>

## Control de calidad (raw data)

<br>

En la *Tabla 6* se muestra la *summary table* del control de calidad de los datos crudos realizado mediante `arrayQualityMetrics()`. En primer lugar, observamos que ningún array está marcado 3 veces, indicando que no existe ninguna muestra especialmente problemática y que la calidad global de nuestros datos es buena. Addicionalmente, si analizamos los resultados en detalle, identificamos que de los 27 arrays, 10 están marcados una sola vez y uno 2 veces. Mientras que los arrays marcados una vez no implican ningún problema para la normalización, el array marcado dos veces podría serlo y es posible que deba ser eliminado. 

<br>

```{r QC summary (RD), echo=F}

QCR <- readxl::read_xlsx("other/qualitycontrolRaw.xlsx")

kable(x = QCR, 
      format = "html",
      align = "ccccccc") %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(row = 0, bold = T, color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle") %>%
  scroll_box(width = "100%", height = "400px")
  
```

<br>

**Tabla 6:** contenido de la *summary table* (`index.html`) obtenida al aplicar la función `arrayQualityMetrics()` sobre los datos crudos (*raw data*).

<br>

Para complementar estos resultados y reforzar nuestra decisión respecto al array "problemático" (AC.1), nos hemos ayudado de un boxplot (*Figura 1.A*) y un PCA plot (*Figura 1.B*). Comparando este array con los de su mismo grupo (AC.2, AC.3), observamos que el patrón de intensidad del boxplot presenta diferencias y que su posición en el PCA plot dista considerablemente del resto. Esto refuerza la idea de que este array podría ser defectuoso y, por lo tanto, ha sido eliminado.  

<br>

```{r boxplot & PCA plot (RD), echo=FALSE, message=F, warning=F, fig.dim=c(14, 8)}

library(cowplot)
library(ggplot2)

p1 <- ggdraw() + draw_image("figures/boxPlots/Intensity_RawData.tiff", scale = 1)
p2 <- ggdraw() + draw_image("figures/PCAPlots/PCA_RawData.tiff", scale = 1)

plot_grid(p1, p2, labels = c("A", "B"), label_size = 20)

```

**Figura 1:** boxplot de los datos crudos **(A)**. PCA plot de los datos crudos **(B)**. 

<br>

## Control de calidad (normalized data)

<br>

Una vez eliminado el array AC.1 y normalizados los datos, se ha realizado un segundo control de calidad para determinar si la normalización ha funcionado. En la *Tabla 8* se muestra la tabla resumen del output de `arrayQualityMetrics()` mientras que en la *Figura 2* se muestran un boxplot y un PCA plot. Por un lado, observamos que, como consecuencia de la normalización, el número de arrays marcados ha pasado de 11 a 2 y el número de marcas de 12 a 2. Esto indica que, efectivamente, la normalización ha funcionado. Por otro lado, tal y como se esperaba, observamos que los patrones de intensidad inter e intragrupales del boxplot son ahora mucho más homogenéos (*Figura 2.A*). Finalmente, en contraste con lo que observábamos para los datos crudos, el PCA plot muestra una agrupación mucho más palpable entre los chips del mismo grupo (*Figura 2.B*). Además, sugiere la pertinencia o no al grupo DR es la principal fuente de variabilidad (PC1 = 21.4%). En cuanto a la PC2 (14%), identificamos una considerable diferenciación entre el grupo AR y el resto de grupos.    

<br>

```{r QC summary (ND), echo=F}

QCR2 <- readxl::read_xlsx("other/qualitycontrolNorm.xlsx")

kable(x = QCR2, 
      format = "html",
      align = "ccccccc") %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(row = 0, bold = T, color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle") %>%
  scroll_box(width = "100%", height = "400px")
  
```

<br>

**Tabla 8:** contenido de la *summary table* (`index.html`) obtenida al aplicar la función `arrayQualityMetrics()` sobre los datos normalizados (*normalized data*).

<br>

```{r boxplot & PCA plot (ND), echo=FALSE, message=F, warning=F, fig.dim=c(14, 8)}

p1 <- ggdraw() + draw_image("figures/boxPlots/Intensity_NormData.tiff", scale = 1)
p2 <- ggdraw() + draw_image("figures/PCAPlots/PCA_NormData.tiff", scale = 1)

plot_grid(p1, p2, labels = c("A", "B"), label_size = 20)

```

**Figura 2:** boxplot de los datos normalizados **(A)**. PCA plot de los datos normalizados **(B)**.

<br>

## Filtrando los genes menos variables

<br>

Préviamente a la identificación de los genes diferencialmente expresados en cada comparación, se ha realizado un filtrado inespecífico con el objetivo de eliminar aquellos genes con una menor probabilidad de presentar diferencias. La *Figura 3* contiene dos SD plots que muestran la desviación estándar total (calculada a partir de todos los arrays) de cada uno de los genes frente a su índice en función de esta variabilidad. Si centramos nuestra atención en el SD plot generado antes del filtrado (*Figura 3.A*), observamos que de los casi 50000 genes, un 85% tiene una variación total pequeña (**sd < 0.25**) y similar. Esto avala la idea de que solo la expresión de unos pocos genes varía entre condiciones experimentales y nos permite fijar el *threshold* para el filtrado (0.8). En contraposición, si observamos el SD plot generado después del filtrado, observamos que de los 3100 genes que quedan, la variabilidad es superior y no tan constante (*Figura 3.B*).   

<br>

```{r SD plots, echo=FALSE, message=F, warning=F, fig.dim=c(14, 8)}

p1 <- ggdraw() + draw_image("figures/SDPlots/SDplotBefore.tiff", scale = 1)
p2 <- ggdraw() + draw_image("figures/SDPlots/SDplotAfter.tiff", scale = 1)

plot_grid(p1, p2, labels = c("A", "B"), label_size = 20)

```

**Figura 3:** SD plot de los datos normalizados **(A)**. SD plot de los datos normalizados y filtrados **(B)**.

<br>

## Selección de genes (DEG)

<br>

Una vez filtrados los genes y establecidas las comparaciones (*Tabla 5*), identificaremos que genes estan diferencialmente expresados en cada una de ellas. A continuación se muestran, para cada una de las 8 dietas, los 75 genes que presentan una mayor evidencia de estar diferencialmente expresados respecto al control (*Tablas 9-16*).

<br>

**Control vs 60% Fructose (CTvsFR):**

<br>

```{r toptable CTvsFR, echo=F}

CTvsFR <- read.csv(file = "results/annotatedTopTables/topAnnotated_CTvsFR.csv", 
                   header = T, 
                   sep = ",")

CTvsFR$P.Value <- format(x = CTvsFR$P.Value, 
                         scientific = T, 
                         digits = 2)

CTvsFR$adj.P.Val <- format(x = CTvsFR$adj.P.Val, 
                           scientific = T, 
                           digits = 2)

kable(x = head(CTvsFR, 75), 
      format = "html",
      align = "ccccccc", 
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle") %>%
  scroll_box(width = "100%", height = "150px")
  
```

<br>

**Tabla 9:** toptable que contiene los 75 genes con una mayor evidencia de estar diferencialmente expresados entre la dieta control y la dieta FR.

<br>

**Control vs Adjusted Calories Diet (CTvsAC):**

<br>

```{r toptable CTvsAC, echo=F}

CTvsAC <- read.csv(file = "results/annotatedTopTables/topAnnotated_CTvsAC.csv", 
                   header = T, 
                   sep = ",")

CTvsAC$P.Value <- format(x = CTvsAC$P.Value, 
                         scientific = T, 
                         digits = 2)

CTvsAC$adj.P.Val <- format(x = CTvsAC$adj.P.Val,
                           scientific = T, 
                           digits = 2)

kable(x = head(CTvsAC, 75), 
      format = "html",
      align = "ccccccc", 
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle") %>%
  scroll_box(width = "100%", height = "150px")
  
```

<br>

**Tabla 10:** toptable que contiene los 75 genes con una mayor evidencia de estar diferencialmente expresados entre la dieta control y la dieta AC.

<br>

**Control vs Atherogenic Rodent Diet (CTvsAR):**

<br>

```{r toptable CTvsAR, echo=F}

CTvsAR <- read.csv(file = "results/annotatedTopTables/topAnnotated_CTvsAR.csv", 
                   header = T, 
                   sep = ",")

CTvsAR$P.Value <- format(x = CTvsAR$P.Value, 
                         scientific = T, 
                         digits = 2)

CTvsAR$adj.P.Val <- format(x = CTvsAR$adj.P.Val, 
                           scientific = T, 
                           digits = 2)

kable(x = head(CTvsAR, 75), 
      format = "html",
      align = "ccccccc", 
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle") %>%
  scroll_box(width = "100%", height = "150px")
  
```

<br>

**Tabla 11:** toptable que contiene los 75 genes con una mayor evidencia de estar diferencialmente expresados entre la dieta control y la dieta AR.

<br>

**Control vs DHA-suplemented Diet (CTvsDHA):**

<br>

```{r toptable CTvsDHA, echo=F}

CTvsDHA <- read.csv(file = "results/annotatedTopTables/topAnnotated_CTvsDHA.csv", 
                   header = T, 
                   sep = ",")

CTvsDHA$P.Value <- format(x = CTvsDHA$P.Value, 
                          scientific = T, 
                          digits = 2)

CTvsDHA$adj.P.Val <- format(x = CTvsDHA$adj.P.Val, 
                            scientific = T, 
                            digits = 2)

kable(x = head(CTvsDHA, 75), 
      format = "html",
      align = "ccccccc", 
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle") %>%
  scroll_box(width = "100%", height = "150px")
  
```

<br>

**Tabla 12:** toptable que contiene los 75 genes con una mayor evidencia de estar diferencialmente expresados entre la dieta control y la dieta DHA.

<br>

**Control vs Diet-Restriction (CT vs DR):**

<br>

```{r toptable CTvsDR, echo=F}

CTvsDR <- read.csv(file = "results/annotatedTopTables/topAnnotated_CTvsDR.csv", 
                   header = T, 
                   sep = ",")

CTvsDR$P.Value <- format(x = CTvsDR$P.Value, 
                         scientific = T, 
                         digits = 2)

CTvsDR$adj.P.Val <- format(x = CTvsDR$adj.P.Val, 
                           scientific = T, 
                           digits = 2)

kable(x = head(CTvsDR, 75), 
      format = "html",
      align = "ccccccc", 
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle") %>%
  scroll_box(width = "100%", height = "150px")
  
```

<br>

**Tabla 13:** toptable que contiene los 75 genes con una mayor evidencia de estar diferencialmente expresados entre la dieta control y la dieta DR.

<br>

**Control vs EFA-Deficient Diet (CTvsEFA):**

<br>

```{r toptable CTvsEFA, echo=F}

CTvsEFA <- read.csv(file = "results/annotatedTopTables/topAnnotated_CTvsEFA.csv", 
                   header = T, 
                   sep = ",")

CTvsEFA$P.Value <- format(x = CTvsEFA$P.Value, 
                          scientific = T, 
                          digits = 2)

CTvsEFA$adj.P.Val <- format(x = CTvsEFA$adj.P.Val,
                            scientific = T, 
                            digits = 2)

kable(x = head(CTvsEFA, 75), 
      format = "html",
      align = "ccccccc", 
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle") %>%
  scroll_box(width = "100%", height = "150px")
  
```

<br>

**Tabla 14:** toptable que contiene los 75 genes con una mayor evidencia de estar diferencialmente expresados entre la dieta control y la dieta EFA.

<br>

**Control vs High fat Diet (CTvsHF):**

<br>

```{r toptable CTvsHF, echo=F}

CTvsHF <- read.csv(file = "results/annotatedTopTables/topAnnotated_CTvsHF.csv", 
                   header = T, 
                   sep = ",")

CTvsHF$P.Value <- format(x = CTvsHF$P.Value, 
                         scientific = T, 
                         digits = 2)

CTvsHF$adj.P.Val <- format(x = CTvsHF$adj.P.Val, 
                           scientific = T, 
                           digits = 2)

kable(x = head(CTvsHF, 75), 
      format = "html",
      align = "ccccccc", 
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle") %>%
  scroll_box(width = "100%", height = "150px")
  
```

<br>

**Tabla 15:** toptable que contiene los 75 genes con una mayor evidencia de estar diferencialmente expresados entre la dieta control y la dieta HF.

<br>

**Control vs LAR Diet (CTvsLAR):**

<br>

```{r toptable CTvsLAR, echo=F}

CTvsLAR <- read.csv(file = "results/annotatedTopTables/topAnnotated_CTvsLAR.csv", 
                    header = T, 
                    sep = ",")

CTvsLAR$P.Value <- format(x = CTvsLAR$P.Value, 
                          scientific = T, digits = 2)

CTvsLAR$adj.P.Val <- format(x = CTvsLAR$adj.P.Val, 
                            scientific = T, digits = 2)

kable(x = head(CTvsLAR, 75), 
      format = "html",
      align = "ccccccc", 
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, 
           color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle") %>%
  scroll_box(width = "100%", height = "150px")
  
```

<br>

**Tabla 16:** toptable que contiene los 75 genes con una mayor evidencia de estar diferencialmente expresados entre la dieta control y la dieta LAR.

<br>

Las tablas de genes diferencialmente expresados (conocidas también como **toptables**) tienen la misma debilidad y el mismo punto fuerte: contienen demasiada información. Una alternativa más visual para identificar cuan diferencialmente expresados están los genes de cada comparación es mediante  el uso de **volcano plots**. A continuación se muestran los volcano plots para cada una de las 8 comparaciones (*Figura 4*). Para facilitar su interpretación se han añadido una línea horizontal con el fdr *cutoff* (FDR = 0.1), dos líneas verticales con los foldChange *cutoffs* (FC = -2, 2) y una leyenda de colores (NS = gris, log2FC = verde, p-value = azul, p-value & log2FC = rojo). 

<br>

Tanto los datos de las toptables como los de los volcano plots parecen indicar que las dietas que presentan una mayor variación en la expresión respecto el control son AR, DR y AC mientras las dietas con menor variación parecen ser DHA, FR y LAR. Estos resultados secundan el patrón que observamos en el PCA plot de los datos normalizados (*Figura 2*).

<br>

```{r volcano plots, echo=F, fig.dim=c(14, 25)}

p1 <- ggdraw() + draw_image("figures/volcanoPlots/EnhancedVP/VP_CTvsFR.tiff", scale = 1)
p2 <- ggdraw() + draw_image("figures/volcanoPlots/EnhancedVP/VP_CTvsAC.tiff", scale = 1)
p3 <- ggdraw() + draw_image("figures/volcanoPlots/EnhancedVP/VP_CTvsAR.tiff", scale = 1)
p4 <- ggdraw() + draw_image("figures/volcanoPlots/EnhancedVP/VP_CTvsDHA.tiff", scale = 1)
p5 <- ggdraw() + draw_image("figures/volcanoPlots/EnhancedVP/VP_CTvsDR.tiff", scale = 1)
p6 <- ggdraw() + draw_image("figures/volcanoPlots/EnhancedVP/VP_CTvsEFA.tiff", scale = 1)
p7 <- ggdraw() + draw_image("figures/volcanoPlots/EnhancedVP/VP_CTvsHF.tiff", scale = 1)
p8 <- ggdraw() + draw_image("figures/volcanoPlots/EnhancedVP/VP_CTvsLAR.tiff", scale = 1)


plot_grid(p1, p2, p3, p4, p5, p6, p7, p8, ncol = 2, nrow = 4)

```

**Figura 4:** volcano plots resultantes de las comparaciones de la dieta control con cada una de las otras 8 dietas por separado. Se consideran diferencialmente expresados los genes que corresponden a los puntos de color rojo.

<br>

Podemos complementar los resultados de las toptables y los volcano plots construyendo una tabla resumen que contenga, para cada comparación, el número de genes sobrexpresados (log2FC > 1 & p-valor ajustado < 0.1), infraexpresados (log2FC < 1 & p-valor ajustado < 0.1) o aquellos que no varían su expresión (log2FC $\in [-1, 1]$ | p-valor ajustado > 0.1). La *Tabla 17* muestra el contenido de esta tabla resumen. Observamos que, tal y como se ha propuesto anteriormente, las dietas que presentan mayor cantidad de genes diferencialmente expresados respecto al control son DR (573), AR (283) y AC (178). Las dietas que presentan menor cantidad de genes son DHA (7), **FR (33) y EFA (72).

<br>

```{r summary expression table, echo=F}

summary <- read.csv("results/multipleComparison/multipleComparison.csv")

kable(x = summary, 
      format = "html",
      align = "ccccccc") %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(row = 0, bold = T, color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle")

```

<br>

**Tabla 17:** genes sobreexpresados (*Up*), infraexpresados (*Down*) y aquellos que no presentan variación en su expresión (*NotSig*) para cada una de las 8 dietas (respecto al control).

<br>

Tras seleccionar los genes diferencialmente expresados en almenos una de las comparaciones (1333), podemos construir un **heatmap** para comparar los patrones de expresión entre muestras/dietas y agruparlas en clústers en función de su similaridad (*Figura 5*). Si observamos detalladamente los resultados, identificamos, en primer lugar, que hay dos dietas cuyos patrones difieren claramente del resto y entre ellas. Nos referimos a DR y AR. En relación al resto de dietas, observamos que todas ellas están contenidas en un único macroclúster. Un análisis más detallado muestra que este macroclúster está formado por dos subclústers, uno que contiene las dietas AC, LAR y HF (**subclúster 1**) y otro que contiene las dietas DHA, CT, FR y EFA (**subclúster 2**). Si queremos profundizar aún más, podríamos afirmar que el subclúster 1 está constituido por dos subclústers adicionales, uno que contiene AC (**subclúster 1.1**) y otro que contiene LAR y HF (**subclúster 1.2**). En referencia al subclúster 2, este también puede ser segregado en dos subclústers más pequeños, uno que contiene los grupos CT y DHA (**subclúster 2.1**) y uno que contiene los grupos FR y EFA (**subclúster 2.2**). En cualquier caso, la información más valiosa que podemos extraer de este gráfico es que las dietas más parecidas al control son de más a menos: DHA, EFA y FR y las dietas más alejadas del control son de más a menos: DR, AR y AC. 

<br>

```{r heatmap, echo=F, fig.dim=c(14, 15)}

p1 <- ggdraw() + draw_image("figures/heatMaps/heatmap.tiff", scale = 1)

plot_grid(p1)

```

<br>

**Figura 5:** comparación, mediante un heatmap, de los patrones de expresión de los genes diferencialmente expresados almenos entre 2 de las 9 dietas.

<br>

Ahora que ya hemos agrupado las dietas, podemos estudiar cuantos genes diferencialmente expresados respecto al control comparten las dietas de un mismo clúster. A continuación se muestran 2 diagramas de Venn, uno para el **subclúster 1** y uno para el **subclúster 2**. En primer lugar, vamos a analizar los resultados correspondientes al clúster 1 (*Figura 6A*). Observamos que, respecto al control, las dietas AC y LAR comparten 23 genes diferencialmente expresados. Adicionalmente, las dietas LAR y HF comparten 20 genes, las dietas AC y HF 39 y las tres dietas 11. En cuanto al clúster 2, las dietas FR y DHA comparten 1 gene, las dietas EFA y DHA también 1 gen, las dietas FR y EFA comparten 7 genes y, finalmente, las tres dietas comparten 1 gen.

<br>

```{r venn plots, echo=F, fig.dim=c(18, 9)}

p1 <- ggdraw() + draw_image("figures/VennPlots/VPCluster1.1_all.tiff", scale = 1.12)
p4 <- ggdraw() + draw_image("figures/VennPlots/VPCluster2.1_all.tiff", scale = 1.12)

plot_grid(p1, p4, ncol = 2, nrow = 1, labels = c("A", "B"), label_size = 20)

```

**Figura 6:** diagrama de Venn que muestra los genes en común entre las comparaciones de cada una de las dietas del clúster 1 y el control **(A)**. Diagrama de Venn que muestra los genes en común entre las comparaciones de cada una de las dietas del clúster 2 y el control.

<br>

Una enfoque más apropiado para analizar estos resultados consiste en determinar que porcentaje o proporción de genes de una comparación se encuentra en otra. Mediante simples cálculos obtenemos los siguientes resultados:

<br>

**Clúster 1:**

<br>

+ Un **38%** de los genes diferencialmente expresados en HF lo están para AC
+ Un **20%** de los genes diferencialmente expresados en HF lo están para LAR
+ Un **21%** de los genes diferencialmente expresados en LAR lo están para HF
+ Un **27%** de los genes diferencialmente expresados en LAR lo están para AC
+ Un **22%** de los genes diferencialmente expresados en AC lo están para HF
+ Un **13%** de los genes diferencialmente expresados en AC lo están para LAR
+ Un **4%** de los genes diferencialmente expresados en alguno de estos grupos lo están en los tres.

<br>

**Clúster 2:**

<br>

+ Un **3%** de los genes diferencialmente expresados en FR lo están para DHA
+ Un **21%** de los genes diferencialmente expresados en FR lo están para EFA
+ Un **10%** de los genes diferencialmente expresados en EFA lo están para FR
+ Un **1.4%** de los genes diferencialmente expresados en EFA lo están para DHA
+ Un **14%** de los genes diferencialmente expresados en DHA lo están para FR
+ Un **14%** de los genes diferencialmente expresados en DHA lo están para EFA
+ Un **1%** de los genes diferencialmente expresados en alguno de estos grupos lo están en los tres.

<br>

## Análisis de pathways

<br>

Aunque ya conocemos que genes están sobrexpresados o infraexpresados respecto al control en cada una de las dietas, es difícil extraer conclusiones a partir de esta información. Con el objetivo de obtener una visión más general e identificar que vías metabólicas se ven modificadas por cada dieta se ha realizado un **análisis de significación** o **de pathways**. Este tipo de análisis permiten clasificar y agrupar los genes diferencialmente expresados dentro de las vías metabólicas en las que participan. A continuación se muestra, para cada dieta, una tabla que contiene los resultados de este análisis (*Tablas 18-24*). Es importante destacar que la comparación CTvsDHA no se ha incluido porque el número insuficiente de genes diferencialmente expresados no ha permitido realizar el análisis.

<br>

**Control vs 60% Fructose (CTvsFR):**

<br>

```{r pathway CTvsFR, echo=F}

CTvsFR <- read.csv(file = "results/pathwayAnalysis/enrichedPathwayTables/ReactomePA.Results.CTvsFR.csv", 
                    header = T, 
                    sep = ",")

CTvsFR <- CTvsFR[ , -8]

CTvsFR$pvalue <- format(x = CTvsFR$pvalue, 
                        scientific = T, 
                        digits = 2)

CTvsFR$p.adjust <- format(x = CTvsFR$p.adjust, 
                        scientific = T, 
                        digits = 2)

CTvsFR$qvalue <- format(x = CTvsFR$qvalue, 
                        scientific = T, 
                        digits = 2)

kable(x = CTvsFR, 
      format = "html",
      align = "ccccccc", 
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, 
           color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle")

```

<br>

**Tabla 18:** vías metabólicas expresadas diferencialmente entre el control y la dieta HF.

<br>

**Control vs Adjusted Calories Diet (CTvsAC):**

<br>

```{r pathway CTvsAC, echo=F}

CTvsAC <- read.csv(file = "results/pathwayAnalysis/enrichedPathwayTables/ReactomePA.Results.CTvsAC.csv", 
                   header = T, 
                   sep = ",")

CTvsAC <- CTvsAC[ , -8]

CTvsAC$pvalue <- format(x = CTvsAC$pvalue, 
                        scientific = T, 
                        digits = 2)

CTvsAC$p.adjust <- format(x = CTvsAC$p.adjust, 
                        scientific = T, 
                        digits = 2)

CTvsAC$qvalue <- format(x = CTvsAC$qvalue, 
                        scientific = T, 
                        digits = 2)

kable(x = CTvsAC, 
      format = "html",
      align = "ccccccc", 
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, 
           color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle") %>%
    scroll_box(width = "100%", height = "250px")
  
```

<br>

**Tabla 19:** vías metabólicas expresadas diferencialmente entre el control y la dieta AC.

<br>

**Control vs Atherogenic Rodent Diet (CTvsAR):**

<br>

```{r pathway CTvsAR, echo=F}

CTvsAR <- read.csv(file = "results/pathwayAnalysis/enrichedPathwayTables/ReactomePA.Results.CTvsAR.csv", 
                   header = T, 
                   sep = ",")

CTvsAR <- CTvsAR[ , - 8]

CTvsAR$pvalue <- format(x = CTvsAR$pvalue, 
                        scientific = T, 
                        digits = 2)

CTvsAR$p.adjust <- format(x = CTvsAR$p.adjust, 
                        scientific = T, 
                        digits = 2)

CTvsAR$qvalue <- format(x = CTvsAR$qvalue, 
                        scientific = T, 
                        digits = 2)

kable(x = CTvsAR, 
      format = "html",
      align = "ccccccc", 
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, 
           color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle") %>%
    scroll_box(width = "100%", height = "250px")
  
```

<br>

**Tabla 20:** vías metabólicas expresadas diferencialmente entre el control y la dieta AR.

<br>

**Control vs Diet-Restriction (CTvsDR):**

<br>

```{r pathway CTvsDR, echo=F}

CTvsDR <- read.csv(file = "results/pathwayAnalysis/enrichedPathwayTables/ReactomePA.Results.CTvsDR.csv", 
                   header = T, 
                   sep = ",")

CTvsDR <- CTvsDR[ , - 8]

CTvsDR$pvalue <- format(x = CTvsDR$pvalue, 
                        scientific = T, 
                        digits = 2)

CTvsDR$p.adjust <- format(x = CTvsDR$p.adjust, 
                        scientific = T, 
                        digits = 2)

CTvsDR$qvalue <- format(x = CTvsDR$qvalue, 
                        scientific = T, 
                        digits = 2)

kable(x = CTvsDR, 
      format = "html",
      align = "ccccccc", 
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, 
           color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle") %>%
    scroll_box(width = "100%", height = "250px")
  
```

<br>

**Tabla 21:** vías metabólicas expresadas diferencialmente entre el control y la dieta DR.

<br>

**Control vs EFA-Deficient Diet (CTvsEFA):**

<br>

```{r pathway CTvsEFA, echo=F}

CTvsEFA <- read.csv(file = "results/pathwayAnalysis/enrichedPathwayTables/ReactomePA.Results.CTvsEFA.csv", 
                   header = T, 
                   sep = ",")

CTvsEFA <- CTvsEFA[ , - 8]

CTvsEFA$pvalue <- format(x = CTvsEFA$pvalue, 
                        scientific = T, 
                        digits = 2)

CTvsEFA$p.adjust <- format(x = CTvsEFA$p.adjust, 
                        scientific = T, 
                        digits = 2)

CTvsEFA$qvalue <- format(x = CTvsEFA$qvalue, 
                        scientific = T, 
                        digits = 2)

kable(x = CTvsEFA, 
      format = "html",
      align = "ccccccc", 
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, 
           color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle")
  
```

<br>

**Tabla 22:** vías metabólicas expresadas diferencialmente entre el control y la dieta EFA.

<br>

**Control vs High fat Diet (CTvsHF):**

<br>

```{r pathway CTvsHF, echo=F}

CTvsHF <- read.csv(file = "results/pathwayAnalysis/enrichedPathwayTables/ReactomePA.Results.CTvsHF.csv", 
                   header = T, 
                   sep = ",")

CTvsHF <- CTvsHF[ , - 8]

CTvsHF$pvalue <- format(x = CTvsHF$pvalue, 
                        scientific = T, 
                        digits = 2)

CTvsHF$p.adjust <- format(x = CTvsHF$p.adjust, 
                        scientific = T, 
                        digits = 2)

CTvsHF$qvalue <- format(x = CTvsHF$qvalue, 
                        scientific = T, 
                        digits = 2)

kable(x = CTvsHF, 
      format = "html",
      align = "ccccccc", 
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, 
           color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle")
  
```

<br>

**Tabla 23:** vías metabólicas expresadas diferencialmente entre el control y la dieta HF.

<br>

**Control vs LAR Diet (CTvsLAR):**

<br>

```{r pathway CTvsLAR, echo=F}

CTvsLAR <- read.csv(file = "results/pathwayAnalysis/enrichedPathwayTables/ReactomePA.Results.CTvsLAR.csv", 
                   header = T, 
                   sep = ",")

CTvsLAR <- CTvsLAR[ , - 8]

CTvsLAR$pvalue <- format(x = CTvsLAR$pvalue, 
                        scientific = T, 
                        digits = 2)

CTvsLAR$p.adjust <- format(x = CTvsLAR$p.adjust, 
                        scientific = T, 
                        digits = 2)

CTvsLAR$qvalue <- format(x = CTvsLAR$qvalue, 
                        scientific = T, 
                        digits = 2)

kable(x = CTvsLAR, 
      format = "html",
      align = "ccccccc", 
      digits = 2) %>%
  kable_styling(bootstrap_options = c("striped", "hover"), 
                font_size = 12, 
                fixed_thead = T) %>%
  row_spec(0, bold = T, 
           color = "white", background = "#482677FF") %>%
  collapse_rows(1, valign = "middle") %>%
    scroll_box(width = "100%", height = "250px")
  
```

<br>

**Tabla 24:** vías metabólicas expresadas diferencialmente entre el control y la dieta LAR.

<br>

De forma análoga a las toptables, las pathway tables también contienen demasiada información. Una solución mucho más visual consiste en construir un **cnetplot** para cada comparación. A continuación se muestran los cnetplots corresondientes a cada una de las tablas que se acaban de presentar (*Figura 7*).

<br>

```{r cnetplots, echo=F, fig.dim=c(15, 30)}

p1 <- ggdraw() + draw_image("figures/cnetPlots/ReactomePAcnetplot.CTvsFR.tiff", scale = 1)
p2 <- ggdraw() + draw_image("figures/cnetPlots/ReactomePAcnetplot.CTvsAC.tiff", scale = 1)
p3 <- ggdraw() + draw_image("figures/cnetPlots/ReactomePAcnetplot.CTvsAR.tiff", scale = 1)
p4 <- ggdraw() + draw_image("figures/cnetPlots/ReactomePAcnetplot.CTvsDR.tiff", scale = 1)
p5 <- ggdraw() + draw_image("figures/cnetPlots/ReactomePAcnetplot.CTvsEFA.tiff", scale = 1)
p6 <- ggdraw() + draw_image("figures/cnetPlots/ReactomePAcnetplot.CTvsHF.tiff", scale = 1)
p7 <- ggdraw() + draw_image("figures/cnetPlots/ReactomePAcnetplot.CTvsLAR.tiff", scale = 1)

plot_grid(p1, p2, p3, p4, p5, p6, p7, ncol = 2, nrow = 4, labels = "AUTO", label_size = 20)

```

**Figura 7:** cnetplots que muestran las vías metabólicas con mayor evidencia de estar diferencialmente expresadas entre el control y las dietas FR **(A)**, AC **(B)**, AR **(C)**, DR **(D)**, EFA **(E)**, HF **(F)** y LAR **(G)**.

<br>

Empezaremos por comentar los resultados de cada dieta por separado. En la lista presentada a continuación se indican cuáles son las vías con mayor evidencia de estar diferencialmente expresadas respecto al control, especificando si estas están sobrexpresadas, infraexpresadas o si presentan, en proporciones similares, genes en ambas direcciones. 

<br>

+ **FR:** biosíntesis de Acyl-CoA ($\uparrow$) (*Figura 7.A*). 
+ **AC:** síntesis de colesterol ($\downarrow$) y metabolismos de ácidos grasos ($\uparrow\downarrow$), esteroides ($\downarrow$) y ácidos $\alpha$-linoleico y linoleico ($\uparrow\downarrow$) (*Figura 7.B*). 
+ **AR:** síntesis de colesterol ($\downarrow$), metabolismo de esteroides ($\uparrow\downarrow$), oxidaciones biológicas ($\uparrow$) y fase 1 del metabolismo ($\uparrow$) (*Figura 7.C*). 
+ **DR:** metabolismo de ácidos grasos ($\downarrow$), oxidaciones biológicas ($\uparrow\downarrow$), síntesis de colesterol ($\downarrow$) (*Figura 7.D*). 
+ **EFA:** síntesis de esteroides ($\uparrow$), biosíntesis de colesterol ($\uparrow$) y metabolismo de triglicéridos ($\uparrow$) (*Figura 7.E*). 
+ **HF:** metabolismo de ácidos grasos ($\uparrow$), síntesis de colesterol ($\uparrow$) y autofagia mediada por chaperonas ($\uparrow$) (*Figura 7.F*). 
+ **LAR:** oxidaciones biológicas ($\uparrow\downarrow$), fase 1 del metabolismo ($\uparrow\downarrow$) y metabolismo de ácidos grasos ($\downarrow$) (*Fig 7.G*). 

<br>

Por otro lado, puede resultar interesante comparar que vías comparten o no las dietas de los anteriormente definidos clúster 1 y clúster 2. En relación al **clúster 1** (AC, HF, LAR), de las cuatro vías que presentan una mayor evidencia de estar diferencialmente expresadas, solo comparten el metabolismo de ácidos grasos. A esta vía se le añade la síntesis de colesterol si solo consideramos las dietas AC y HF. Resulta destacable que, aún cuando el metabolismo de ácidos grasos presenta genes expresados en ambas direcciones para las condiciones AC y HF, esté significativamente infraexpresado para la dieta LAR. También cabe remarcar que mientras para la dieta HF los genes involucrados en la síntesis de colesterol no presentan una sobrexpresión demasiado accentuada, si la presentan para la dieta AC. En cuanto al **clúster 2** (FR y EFA), las dos dietas comparten la única vía diferencialmente expresada en FR, estando, además, sobrexpresada en ambas condiciones.

<br>

# Discusión

<br>

En cualquier proyecto de investigación, la discusión de los resultados y la extracción de conclusiones requieren de un conocimiento exhaustivo del contexto biológico del estudio. Sin embargo, obtener el grado adecuado de este conocimiento puede implicar meses o años realizando investigación en una misma dirección. Por ese motivo, con mucha frecuencia, el papel del bioinformático pasa a un segundo plano en esta parte del estudio. Su papel, pues, consiste básicamente en generar un informe con los resultados y, dentro de lo posible, comentarlos. Considerando que en la sección de resultados ya hemos realizado una breve discusión de estos y que, debido a la gran cantidad de grupos la complejidad del estudio que hemos escogido es considerable, hemos decidido enfocar la discusión desde un punto de vista más valorativo. 

<br>

A lo largo de la redacción de este informe nos hemos basado principalmente en los métodos propuestos por el personal docente que coordina esta asignatura. Si bien es verdad que en algunas situaciones se han buscado alternativas más completas, en la mayoría de casos se ha intentado seguir las pautas establecidas. Sin embargo, la velocidad con la que avanzan las diferentes ramas de la bioinformática y la aparición constante de nuevos paquetes hace que algunas de las librerías utilizadas en el estudio no sean las más óptimas. Por ejemplo, la función `EnhancedVolcano()` del paquete con el mismo nombre resulta una alternativa mucho más completa y visual que la función `volcanoplot()` del paquete `limma`. Por otro lado, en relación al análisis de pathways, aunque el profesorado planteó una alternativa possible al paquete `ReactomePA` (`clusterProfiler`), por un tema de simplicidad y tiempo nos decidimos a utilizar el que había sido propuesto en primer lugar.

<br>

Es obvio que si hubiéramos dispuesto de más tiempo o tubiéramos un conocimiento más detallado de la temática del estudio la discusión de los resultados y la elaboración de conclusiones hubiera sido mucho más profunda. Sin embargo, esta PEC ha sido un ejercicio muy enriquecedor, y nos ha ayudado a establecer un primer contacto con los análisis de datos de microarrays a la vez que perfeccionábamos la construcción de informes dinámicos con RMarkdown.

</div>

<br>

# Annexo

<br>

```{r plotPCA3, eval=F}

plotPCA3 <- function (datos, labels, factor, title, scale, size = 1.5, glineas = 0.25) {
  data <- prcomp(t(datos), scale = scale)
  
  # plot adjustments
  
  dataDf <- data.frame(data$x)
  Group <- factor
  loads <- round(data$sdev^2/sum(data$sdev^2) * 100, 1)
  
  # main plot
  
  p1 <- ggplot(data = dataDf, aes(x = PC1, y = PC2)) +
    theme_classic() +
    geom_hline(yintercept = 0, color = "gray70") +
    geom_vline(xintercept = 0, color = "gray70") +
    geom_point(aes(color = Group), size = 2) +
    coord_cartesian(xlim = c(min(data$x[ , 1]) - 5, max(data$x[ , 1]) + 5)) +
    scale_fill_discrete(name = "Group") +
    theme(axis.title.y = element_text(size = 10,
                                      margin = margin(t = 0, r = 10, b = 0, l = 0)),
          axis.title.x = element_text(size = 10,
                                      margin = margin(t = 10, r = 0, b = 0, l = 0)),
          axis.text = element_text(size = 7), 
          legend.text = element_text(size = 8),
          legend.title = element_text(size = 10),
          legend.key.size = unit(0.4, "cm"),
          legend.key.width = unit(0.5,"cm")) 
  
  # avoiding labels superposition
  
  p1 + geom_text_repel(aes(y = PC2 + 0.25, label = labels), segment.size = 0.25, size = size) + 
    labs(x = c(paste("PC1", loads[1], "%")), y = c(paste("PC2", loads[2], "%"))) +  
    ggtitle(paste("Principal Component Analysis for: ", title, sep = " ")) + 
    theme(plot.title = element_text(hjust = 0.5)) +
    scale_color_viridis(discrete = T)
}
```

<br>

**Figura S1:** Código correspondiente a la función `plotPCA3()`.

<br>

```{r annotatedTopTable, eval=F}

annotatedTopTable <- function(topTab, anotPackage){
  
  topTab <- cbind(PROBEID = rownames(topTab), topTab)
  myProbes <- rownames(topTab)
  thePackage <- eval(parse(text = anotPackage))
  
  geneAnots <- select(thePackage, 
                      myProbes, 
                      c("SYMBOL", "ENTREZID", "GENENAME"))
  
  annotatedTopTab <- merge(x = geneAnots, 
                           y = topTab, by.x = "PROBEID", 
                           by.y = "PROBEID")
  return(annotatedTopTab)
  
}

```

<br>

**Figura S2:** Código correspondiente a la función `annotatedTopTable()`.

<br>

# Referencias

<br>