# PEC1: Análisis de Datos Ómicos

# -------------------------------------------------------------------------------------------------------------------------------------------------

# Estableciendo el directorio de trabajo

setwd("C:/Users/USER/Documents/Màster Bioestadística i Bioinfo/Análisis de datos Ómicos/PECS/ADO_PEC1_Marc_Garcia/")

#-------------------------------------------------------------------------------------------------------------------------------------------------

# Preparando el entorno de trabajo 

dir.create("data/")
dir.create("results/")
dir.create("other/")
dir.create("figures/")

#-------------------------------------------------------------------------------------------------------------------------------------------------

# Carga de paquetes

library(Biobase)
library(oligo)
library(arrayQualityMetrics)
library(ggplot2)
library(ggrepel)
library(viridis)
library(genefilter)
library(mouse4302.db)
library(limma)
library(gplots)
library(RColorBrewer)
library(annaffy)
library(magrittr)
library(EnhancedVolcano)
library(ReactomePA)
library(enrichplot)
library(DOSE)

# -------------------------------------------------------------------------------------------------------------------------------------------------

# Cargando archivos CEL en un ExpressionSet

data_dir <- file.path("data/")
results_dir <- file.path("results/")
 
cel_files <- list.celfiles(data_dir, 
                           full.names = T)

targets_file <- read.AnnotatedDataFrame(path = "data/", 
                                        filename = "targets.csv",
                                        header = T, 
                                        row.names = 1, 
                                        sep = ";")

raw_data <- read.celfiles(cel_files, 
                           phenoData = targets_file)

# --------------------------------------------------------------------------------------------------------------------------------------------------

# Exploración datos crudos (raw data) + cambio nombre muestras

# 1) Exploración

head(exprs(raw_data)[ , 1:7], 10)                   # Matriz de expresión (10 filas, 7 columnas)
pData(raw_data)                                     # Datos fenotípicos
head(featureNames(raw_data), 10)                    # Nombre de los genes/probesets (10/1004004)
varLabels(raw_data)                                 # Nombre de las covariables
head(sampleNames(raw_data), 7)                      # Nombre de las muestras (7/27)

# 2) Cambio de nombres

rownames(raw_data@phenoData@data) <- targets_file@data$ShortName
sampleNames(raw_data) <- pData(raw_data)$ShortName

# ------------------------------------------------------------------------------------------------------------------------------------------------

# Primer control de calidad (raw data)

# 1) arrayQualityMetrics

dir.create("results/qualityControls")

arrayQualityMetrics(expressionset = raw_data, 
                    outdir = file.path("results/qualityControls/", "QCDir.Raw"), 
                    force = T, 
                    intgroup = c("Group"))

# 2) PCA plot + boxplot

dir.create("figures/boxPlots")
dir.create("figures/PCAPlots")


plotPCA3 <- function (datos, labels, factor, title, scale, size = 1.5, glineas = 0.25) {
  data <- prcomp(t(datos), scale = scale)
  
  # plot adjustments
  
  dataDf <- data.frame(data$x)
  Group <- factor
  loads <- round(data$sdev^2/sum(data$sdev^2) * 100, 1)
  
  # main plot
  
  p1 <- ggplot(data = dataDf, aes(x = PC1, y = PC2)) +
    theme_classic() +
    geom_hline(yintercept = 0, color = "gray70") +
    geom_vline(xintercept = 0, color = "gray70") +
    geom_point(aes(color = Group), size = 2) +
    coord_cartesian(xlim = c(min(data$x[ , 1]) - 5, max(data$x[ , 1]) + 5)) +
    scale_fill_discrete(name = "Group") +
    theme(axis.title.y = element_text(size = 10,
                                      margin = margin(t = 0, r = 10, b = 0, l = 0)),
          axis.title.x = element_text(size = 10,
                                      margin = margin(t = 10, r = 0, b = 0, l = 0)),
          axis.text = element_text(size = 7), 
          legend.text = element_text(size = 8),
          legend.title = element_text(size = 10),
          legend.key.size = unit(0.4, "cm"),
          legend.key.width = unit(0.5,"cm")) 
  
  # avoiding labels superposition
  
  p1 + geom_text_repel(aes(y = PC2 + 0.25, label = labels), segment.size = 0.25, size = size) + 
    labs(x = c(paste("PC1", loads[1], "%")), y = c(paste("PC2", loads[2], "%"))) +  
    ggtitle(paste("Principal Component Analysis for: ", title, sep = " ")) + 
    theme(plot.title = element_text(hjust = 0.5)) +
    scale_color_viridis(discrete = T)
}

if (length(rownames(raw_data)) != 0){

# PCA plot
  
tiff("figures/PCAPlots/PCA_RawData.tiff", 
     res = 300, 
     width = 5.5, 
     height = 5, 
     units = 'in', 
     bg = NA)

print(plotPCA3(datos = exprs(raw_data), 
               labels = targets_file$ShortName, 
               factor = targets_file$Group, 
               title = "Raw data", 
               scale = F, 
               size = 2.5))

dev.off()

# Boxplot

tiff(filename = "figures/boxPlots/Intensity_RawData.tiff", 
     width = 5.5, 
     height = 5.5, 
     res = 300, 
     units = "in", 
     bg = NA)

print(boxplot(x = raw_data, 
              cex.axis = 0.5, 
              las = 2, 
              which = "all", 
              col = c(rep("gray7", 3),
                      rep("#440154FF", 3), 
                      rep("#453781FF", 3), 
                      rep("#33638DFF", 3), 
                      rep("#238A8DFF", 3),
                      rep("#20A387FF", 3), 
                      rep("#55C667FF", 3), 
                      rep("#B8DE29FF", 3), 
                      rep("#FDE725FF", 3)),
              main = "Distribution of raw intensity values", 
              xlab = "Sample",
              ylab = "Intensity"))

dev.off()

}

# 3) Eliminación de arrays defectuosos

raw_data_2 <- raw_data[ , -4]

# ------------------------------------------------------------------------------------------------------------------------------------------------

# Normalización

norm_data <- rma(raw_data_2)

# ------------------------------------------------------------------------------------------------------------------------------------------------

# Segundo control de calidad (normalized data)

# 1) arrayQualityMetrics

arrayQualityMetrics(expressionset = norm_data, 
                    outdir = file.path("results/qualityControls/", "QCDir.Norm"), 
                    force = T, 
                    intgroup = c("Group"))

# 2) PCA plot + boxplot

if (length(rownames(norm_data)) != 0){
  
  # PCA plot
  
  tiff("figures/PCAPlots/PCA_NormData.tiff", 
       res = 300, 
       width = 5.5, 
       height = 5, 
       units = 'in', 
       bg = NA)
  
  print(plotPCA3(datos = exprs(norm_data), 
                 labels = targets_file@data$ShortName[-4], 
                 factor = targets_file@data$Group[-4], 
                 title = "Normalized data", 
                 scale = F, 
                 size = 2.5))
  
  dev.off()
  
  # Boxplot
  
  tiff(filename = "figures/boxPlots/Intensity_NormData.tiff", 
       width = 5.5, 
       height = 5.5, 
       res = 300, 
       units = "in", 
       bg = NA)
  
  print(boxplot(x = norm_data, 
                cex.axis = 0.5, 
                las = 2, 
                which = "all", 
                col = c(rep("gray7", 3),
                        rep("#440154FF", 2), 
                        rep("#453781FF", 3), 
                        rep("#33638DFF", 3), 
                        rep("#238A8DFF", 3),
                        rep("#20A387FF", 3), 
                        rep("#55C667FF", 3), 
                        rep("#B8DE29FF", 3), 
                        rep("#FDE725FF", 3)),
                main = "Boxplot for arrays intensity: Normalized data",
                xlab = "Samples",
                ylab = "Intensity"))
  
  dev.off()
  
}

# ------------------------------------------------------------------------------------------------------------------------------------------------

# Filtrando genes con mayor variabilidad

# 1) Primer SD plot (antes del filtrado)

dir.create("figures/SDPlots")

sds <- apply(X = exprs(norm_data), 
             MARGIN = 1, 
             FUN = sd)

sds_0 <- sort(sds)

tiff(filename = "figures/SDPlots/SDplotBefore.tiff", 
     width = 5.5, 
     height = 5.5, 
     res = 300, 
     units = "in")

plot(x = 1:length(sds_0), 
     y = sds_0, 
     main = "Distribution of variability for all genes", 
     xlab = "Gene index (from least to most variable)", 
     ylab = "Standard deviation", 
     abline(v = length(sds) * c(0.9, 0.95), 
            lty = 2))

dev.off()

# 2) Eliminando genes con baja desviación típica, no anotados o duplicados

annotation(norm_data) <- "mouse4302.db"

filtered <- nsFilter(eset = norm_data, 
                     require.entrez = T, 
                     remove.dupEntrez = T, 
                     var.filter = T, 
                     var.func = IQR, 
                     var.cutoff = 0.85, 
                     filterByQuantile = T, 
                     feature.exclude = "^AFFX")

print(filtered$filter.log)

norm_filtered_data <- filtered$eset

# 3) Segundo SD plot (después del filtrado)

sds <- apply(X = exprs(norm_filtered_data), 
             MARGIN = 1, 
             FUN = sd)

sds_0 <- sort(sds)

tiff(filename = "figures/SDPlots/SDplotAfter.tiff", 
     width = 5.5, 
     height = 5.5, 
     res = 300, 
     units = "in")

plot(x = 1:length(sds_0), 
     y = sds_0, 
     main = "Distribution of variability for filtered genes", 
     xlab = "Gene index (from least to most variable)", 
     ylab = "Standard deviation")

dev.off()

# ------------------------------------------------------------------------------------------------------------------------------------------------

# Guardando matrices de expresión

# 1) Datos crudos (Raw data)

write.csv(x = exprs(raw_data), 
          file = "results/expressionMatrices/raw.Data.csv")

# 2) Datos normalizados (Normalized data)

write.csv(x = exprs(norm_data), 
          file = "results/expressionMatrices/normalized.Data.csv")

# 3) Datos normalizados + filtrados (Filtered data)

write.csv(x = exprs(norm_filtered_data), 
          file = "results/expressionMatrices/normalized.Filtered.Data.csv")

save(norm_data, norm_filtered_data, 
     file = "./results/expressionMatrices/normalized.Data.Rda")

# ------------------------------------------------------------------------------------------------------------------------------------------------

# Definiendo la matriz de diseño

design_matrix <- model.matrix(object = ~ 0 + Group, 
                              data = pData(object = norm_filtered_data))

colnames(design_matrix) <- c("AC", "AR", "CT", "DHA", "DR", 
                             "EFA","FR", "HF", "LAR")

write.csv(x = design_matrix, file = "other/designMatrix.csv")

# ------------------------------------------------------------------------------------------------------------------------------------------------

# Definiendo la matriz de contrastes

contrast_matrix <- makeContrasts(CTvsFR = FR - CT,
                                 CTvsAC = AC - CT,
                                 CTvsAR = AR - CT,
                                 CTvsDHA = DHA - CT,
                                 CTvsDR = DR - CT,
                                 CTvsEFA = EFA - CT,
                                 CTvsHF = HF - CT,
                                 CTvsLAR = LAR - CT,
                                 levels = design_matrix)

write.csv(x = contrast_matrix, file = "other/contrastMatrix.csv")

# ------------------------------------------------------------------------------------------------------------------------------------------------

# Generando el modelo

fit <- lmFit(object = norm_filtered_data, 
             design = design_matrix)

fit_con <- contrasts.fit(fit = fit, 
                         contrasts = contrast_matrix)

fit_eb <- eBayes(fit = fit_con)

# ------------------------------------------------------------------------------------------------------------------------------------------------

# Obteniendo listas de genes diferencialmente expresados

comparisons <- c("CTvsFR", "CTvsAC", "CTvsAR", "CTvsDHA", 
                 "CTvsDR", "CTvsEFA", "CTvsHF", "CTvsLAR")

for (i in comparisons) {
  
  
  name <- paste0("top_table_", i)
  assign(x = name, 
         value = topTable(fit = fit_eb, 
                          number = nrow(fit_eb), 
                          coef = i, 
                          adjust = "fdr"))

}

# 1) CT vs FR (Control vs 60% Fructose Diet)

top_table_CTvsFR <- top_table_CTvsFR[order(top_table_CTvsFR$adj.P.Val), ]

# 2) CT vs AC (Control vs Adjusted Calories Diet -> 42% grasa)

top_table_CTvsAC <- top_table_CTvsAC[order(top_table_CTvsAC$adj.P.Val), ]

# 3) CT vs AR (Control vs Atherogenic Rodent Diet)

top_table_CTvsAR <- top_table_CTvsAR[order(top_table_CTvsAR$adj.P.Val), ]

# 4) CT vs DHA (Control vs DHA-Suplemented Diet)

top_table_CTvsDHA <- top_table_CTvsDHA[order(top_table_CTvsDHA$adj.P.Val), ]

# 5) CT vs DR (Control vs Diet-Restriction)

top_table_CTvsDR <- top_table_CTvsDR[order(top_table_CTvsDR$adj.P.Val), ]

# 6) CT vs EFA (Control vs EFA-Deficient Diet)

top_table_CTvsEFA <- top_table_CTvsEFA[order(top_table_CTvsEFA$adj.P.Val), ]

# 7) CT vs HF (Control vs High fat Diet)

top_table_CTvsHF <- top_table_CTvsHF[order(top_table_CTvsHF$adj.P.Val), ]

# 8) CT vs LAR (Control vs Diet used in LAR)

top_table_CTvsLAR <- top_table_CTvsLAR[order(top_table_CTvsLAR$adj.P.Val), ]

# ---------------------------------------------------------------------------------------------------------------------------------------------------

# Anotando los genes

# 1) Generando una función 

  annotatedTopTable <- function(topTab, anotPackage){
  
  topTab <- cbind(PROBEID = rownames(topTab), topTab)
  myProbes <- rownames(topTab)
  thePackage <- eval(parse(text = anotPackage))
  
  geneAnots <- select(thePackage, 
                      myProbes, 
                      c("SYMBOL", "ENTREZID", "GENENAME"))
  
  annotatedTopTab <- merge(x = geneAnots, 
                           y = topTab, by.x = "PROBEID", 
                           by.y = "PROBEID")
  return(annotatedTopTab)
  
}

# 2) Anotando & guardando las topTables

dir.create("results/annotatedTopTables")

if (dir.exists("results/annotatedTopTables/")){
  
  # 1) CT vs FR (Control vs 60% Fructose Diet)
  
  topAnnotated_CTvsFR <- annotatedTopTable(topTab = top_table_CTvsFR, 
                                           anotPackage = "mouse4302.db")
  
  topAnnotated_CTvsFR <- topAnnotated_CTvsFR[order(topAnnotated_CTvsFR$adj.P.Val), ]
  
  write.csv(topAnnotated_CTvsFR, 
            file = "results/annotatedTopTables/topAnnotated_CTvsFR.csv")
  
  # 2) CT vs AC (Control vs Adjusted Calories Diet -> 42% grasa)
  
  topAnnotated_CTvsAC <- annotatedTopTable(topTab = top_table_CTvsAC, 
                                           anotPackage = "mouse4302.db")
  
  topAnnotated_CTvsAC <- topAnnotated_CTvsAC[order(topAnnotated_CTvsAC$adj.P.Val), ]
  
  write.csv(topAnnotated_CTvsAC, 
            file = "results/annotatedTopTables/topAnnotated_CTvsAC.csv")
  
  # 3) CT vs AR (Control vs Atherogenic Rodent Diet)
  
  topAnnotated_CTvsAR <- annotatedTopTable(topTab = top_table_CTvsAR, 
                                           anotPackage = "mouse4302.db")
  
  topAnnotated_CTvsAR <- topAnnotated_CTvsAR[order(topAnnotated_CTvsAR$adj.P.Val), ]
  
  write.csv(x = topAnnotated_CTvsAR, 
            file = "results/annotatedTopTables/topAnnotated_CTvsAR.csv")
  
  # 4) CT vs DHA (Control vs DHA-Suplemented Diet)
  
  topAnnotated_CTvsDHA <- annotatedTopTable(topTab = top_table_CTvsDHA, 
                                            anotPackage = "mouse4302.db")
  
  topAnnotated_CTvsDHA <- topAnnotated_CTvsDHA[order(topAnnotated_CTvsDHA$adj.P.Val), ]
  
  write.csv(x = topAnnotated_CTvsDHA, 
            file = "results/annotatedTopTables/topAnnotated_CTvsDHA.csv")
  
  # 5) CT vs DR (Control vs Diet-Restriction)
  
  topAnnotated_CTvsDR <- annotatedTopTable(topTab = top_table_CTvsDR, 
                                           anotPackage = "mouse4302.db")
  
  topAnnotated_CTvsDR <- topAnnotated_CTvsDR[order(topAnnotated_CTvsDR$adj.P.Val), ]
  
  write.csv(topAnnotated_CTvsDR, 
            file = "results/annotatedTopTables/topAnnotated_CTvsDR.csv")
  
  # 6) CT vs EFA (Control vs EFA-Deficient Diet)
  
  topAnnotated_CTvsEFA <- annotatedTopTable(topTab = top_table_CTvsEFA, 
                                            anotPackage = "mouse4302.db")
  
  topAnnotated_CTvsEFA <- topAnnotated_CTvsEFA[order(topAnnotated_CTvsEFA$adj.P.Val), ]
  
  write.csv(topAnnotated_CTvsEFA, 
            file = "results/annotatedTopTables/topAnnotated_CTvsEFA.csv")
  
  # 7) CT vs HF (Control vs High fat Diet)
  
  topAnnotated_CTvsHF <- annotatedTopTable(topTab = top_table_CTvsHF, 
                                           anotPackage = "mouse4302.db")
  
  topAnnotated_CTvsHF <- topAnnotated_CTvsHF[order(topAnnotated_CTvsHF$adj.P.Val), ]
  
  write.csv(topAnnotated_CTvsHF, 
            file = "results/annotatedTopTables/topAnnotated_CTvsHF.csv")
  
  # 8) CT vs LAR (Control vs Diet used in LAR)
  
  topAnnotated_CTvsLAR <- annotatedTopTable(topTab = top_table_CTvsLAR, 
                                            anotPackage = "mouse4302.db")
  
  topAnnotated_CTvsLAR <- topAnnotated_CTvsLAR[order(topAnnotated_CTvsLAR$adj.P.Val), ]
  
  write.csv(topAnnotated_CTvsLAR, 
            file = "results/annotatedTopTables/topAnnotated_CTvsLAR.csv")
  
}

# ---------------------------------------------------------------------------------------------------------------------------------------------------

# Visualizando la expresión diferencial -> Volcano plots

dir.create("figures/volcanoPlots")
dir.create("figures/volcanoPlots/VP")
dir.create("figures/volcanoPlots/EnhancedVP")

gene_symbols <- select(x = mouse4302.db, 
                       keys = rownames(fit_eb), 
                       columns = "SYMBOL")

symbols <- gene_symbols$SYMBOL

if (dir.exists("figures/volcanoPlots/EnhancedVP/")){
  
  # 1) CT vs FR (Control vs 60% Fructose Diet)
  
  tiff(filename = "figures/volcanoPlots/EnhancedVP/VP_CTvsFR.tiff", 
       width = 5.5, 
       height = 5.5, 
       res = 300, 
       units = "in")
  
  print(EnhancedVolcano(toptable = topAnnotated_CTvsFR, 
                        lab = topAnnotated_CTvsFR$SYMBOL,
                        selectLab = topAnnotated_CTvsFR$SYMBOL[1:5],
                        x = "logFC", 
                        y = "adj.P.Val", 
                        pCutoff = 0.1, 
                        FCcutoff = 1,
                        ylim = c(0, 3.5), 
                        xlim = c(-3, 3), 
                        pointSize = 1.7,
                        axisLabSize = 13,
                        labSize = 4,
                        subtitle = "",
                        caption = "",
                        title = "Control vs FR", 
                        titleLabSize = 18,
                        legendVisible = F,
                        legendPosition = "bottom", 
                        legendLabSize = 10, 
                        legendIconSize = 3))
  
  dev.off()
  
  
  # 2) CT vs AC (Control vs Adjusted Calories Diet -> 42% grasa)
  
  tiff(filename = "figures/volcanoPlots/EnhancedVP/VP_CTvsAC.tiff", 
       width = 5.5, 
       height = 5.5, 
       res = 300, 
       units = "in")
  
  print(EnhancedVolcano(toptable = topAnnotated_CTvsAC, 
                        lab = topAnnotated_CTvsAC$SYMBOL,
                        selectLab = topAnnotated_CTvsAC$SYMBOL[1:5],
                        x = "logFC", 
                        y = "adj.P.Val", 
                        pCutoff = 0.1, 
                        FCcutoff = 1,
                        ylim = c(0, 10), 
                        xlim = c(-6, 6), 
                        pointSize = 1.7,
                        axisLabSize = 13,
                        labSize = 4,
                        subtitle = "",
                        caption = "",
                        title = "Control vs AC", 
                        titleLabSize = 18, 
                        legendVisible = F,
                        legendPosition = "bottom", 
                        legendLabSize = 10, 
                        legendIconSize = 3))
  
  dev.off()
  
  
  # 3) CT vs AR (Control vs Atherogenic Rodent Diet)
  
  tiff(filename = "figures/volcanoPlots/EnhancedVP/VP_CTvsAR.tiff", 
       width = 5.5, 
       height = 5.5, 
       res = 300, 
       units = "in")
  
  print(EnhancedVolcano(toptable = topAnnotated_CTvsAR, 
                        lab = topAnnotated_CTvsAR$SYMBOL,
                        selectLab = topAnnotated_CTvsAR$SYMBOL[1:5],
                        x = "logFC", 
                        y = "adj.P.Val", 
                        pCutoff = 0.1, 
                        FCcutoff = 1,
                        ylim = c(0, 15), 
                        xlim = c(-5, 7), 
                        pointSize = 1.7,
                        axisLabSize = 13,
                        labSize = 4,
                        subtitle = "",
                        caption = "",
                        title = "Control vs AR", 
                        titleLabSize = 18, 
                        legendVisible = F,
                        legendPosition = "bottom", 
                        legendLabSize = 10, 
                        legendIconSize = 3))
  
  dev.off()
  
  
  # 4) CT vs DHA (Control vs DHA-Suplemented Diet)
  
  tiff(filename = "figures/volcanoPlots/EnhancedVP/VP_CTvsDHA.tiff", 
       width = 5.5, 
       height = 5.5, 
       res = 300, 
       units = "in")
  
  print(EnhancedVolcano(toptable = topAnnotated_CTvsDHA, 
                        lab = topAnnotated_CTvsDHA$SYMBOL,
                        selectLab = topAnnotated_CTvsDHA$SYMBOL[1:5],
                        x = "logFC", 
                        y = "adj.P.Val", 
                        pCutoff = 0.1, 
                        FCcutoff = 1,
                        ylim = c(0, 1.5), 
                        xlim = c(-2, 2), 
                        pointSize = 1.7,
                        axisLabSize = 13,
                        labSize = 4,
                        subtitle = "",
                        caption = "",
                        title = "Control vs DHA", 
                        titleLabSize = 18, 
                        legendVisible = F,
                        legendPosition = "bottom", 
                        legendLabSize = 10, 
                        legendIconSize = 3))
  
  dev.off()
  
  
  # 5) CT vs DR (Control vs Diet-Restriction)
  
  tiff(filename = "figures/volcanoPlots/EnhancedVP/VP_CTvsDR.tiff", 
       width = 5.5, 
       height = 5.5, 
       res = 300, 
       units = "in")
  
  print(EnhancedVolcano(toptable = topAnnotated_CTvsDR, 
                        lab = topAnnotated_CTvsDR$SYMBOL,
                        selectLab = topAnnotated_CTvsDR$SYMBOL[1:5],
                        x = "logFC", 
                        y = "adj.P.Val", 
                        pCutoff = 0.1, 
                        FCcutoff = 1,
                        ylim = c(0, 16), 
                        xlim = c(-8, 10), 
                        pointSize = 1.7,
                        axisLabSize = 13,
                        labSize = 4,
                        subtitle = "",
                        caption = "",
                        title = "Control vs DR", 
                        titleLabSize = 18, 
                        legendVisible = F,
                        legendPosition = "bottom", 
                        legendLabSize = 10, 
                        legendIconSize = 3))
  
  dev.off()
  
  
  # 6) CT vs EFA (Control vs EFA-Deficient Diet)
  
  tiff(filename = "figures/volcanoPlots/EnhancedVP/VP_CTvsEFA.tiff", 
       width = 5.5, 
       height = 5.5, 
       res = 300, 
       units = "in")
  
  print(EnhancedVolcano(toptable = topAnnotated_CTvsEFA, 
                        lab = topAnnotated_CTvsEFA$SYMBOL,
                        selectLab = topAnnotated_CTvsEFA$SYMBOL[1:5],
                        x = "logFC", 
                        y = "adj.P.Val", 
                        pCutoff = 0.1, 
                        FCcutoff = 1,
                        ylim = c(0, 4.5), 
                        xlim = c(-3, 2.5), 
                        pointSize = 1.7,
                        axisLabSize = 13,
                        labSize = 4,
                        subtitle = "",
                        caption = "",
                        title = "Control vs EFA", 
                        titleLabSize = 18, 
                        legendVisible = F,
                        legendPosition = "bottom", 
                        legendLabSize = 10, 
                        legendIconSize = 3))
  
  dev.off()
  
  
  # 7) CT vs HF (Control vs High fat Diet)
  
  tiff(filename = "figures/volcanoPlots/EnhancedVP/VP_CTvsHF.tiff", 
       width = 5.5, 
       height = 5.5, 
       res = 300, 
       units = "in")
  
  print(EnhancedVolcano(toptable = topAnnotated_CTvsHF, 
                        lab = topAnnotated_CTvsHF$SYMBOL,
                        selectLab = topAnnotated_CTvsHF$SYMBOL[1:5],
                        x = "logFC", 
                        y = "adj.P.Val", 
                        pCutoff = 0.1, 
                        FCcutoff = 1,
                        ylim = c(0, 5), 
                        xlim = c(-3.5, 3.5), 
                        pointSize = 1.7,
                        axisLabSize = 13,
                        labSize = 4,
                        subtitle = "",
                        caption = "",
                        title = "Control vs HF", 
                        titleLabSize = 18, 
                        legendVisible = F,
                        legendPosition = "bottom", 
                        legendLabSize = 10, 
                        legendIconSize = 3))
  
  dev.off()
  
  
  # 8) CT vs LAR (Control vs Diet used in LAR)
  
  tiff(filename = "figures/volcanoPlots/EnhancedVP/VP_CTvsLAR.tiff", 
       width = 5.5, 
       height = 5.5, 
       res = 300, 
       units = "in")
  
  print(EnhancedVolcano(toptable = topAnnotated_CTvsLAR, 
                        lab = topAnnotated_CTvsLAR$SYMBOL,
                        selectLab = topAnnotated_CTvsLAR$SYMBOL[1:5],
                        x = "logFC", 
                        y = "adj.P.Val", 
                        pCutoff = 0.1, 
                        FCcutoff = 1,
                        ylim = c(0, 7), 
                        xlim = c(-3.5, 5), 
                        pointSize = 1.7,
                        axisLabSize = 13,
                        labSize = 4,
                        subtitle = "",
                        caption = "",
                        title = "Control vs LAR", 
                        titleLabSize = 18, 
                        legendVisible = F,
                        legendPosition = "bottom", 
                        legendLabSize = 10, 
                        legendIconSize = 3))
  
  dev.off()
  
}
if (dir.exists("figures/volcanoPlots/VP/")){
  
  # 1) CT vs FR (Control vs 60% Fructose Diet)
  
  tiff(filename = "figures/volcanoPlots/VP/VP_CTvsFR.tiff", 
       width = 5.5, 
       height = 4.5, 
       res = 300, 
       units = "in")
  
  print(volcanoplot(fit = fit_eb, 
                    coef = 1, 
                    highlight = 5, 
                    names = symbols, 
                    col = "firebrick4",  
                    main = paste("Differentially expressed genes", 
                                 colnames(contrast_matrix)[1], 
                                 sep = "\n")), 
        abline(v = c(-1, 1)))
  
  dev.off()
  
  
  # 2) CT vs AC (Control vs Adjusted Calories Diet -> 42% grasa)
  
  tiff(filename = "figures/volcanoPlots/VP/VP_CTvsAC.tiff", 
       width = 5.5, 
       height = 4.5, 
       res = 300, 
       units = "in")
  
  print(volcanoplot(fit = fit_eb, 
                    coef = 2, 
                    highlight = 5, 
                    names = symbols, 
                    col = "firebrick4", 
                    main = paste("Differentially expressed genes", 
                                 colnames(contrast_matrix)[2], 
                                 sep = "\n")), 
        abline(v = c(-1, 1)))
  
  dev.off()
  
  
  # 3) CT vs AR (Control vs Atherogenic Rodent Diet)
  
  tiff(filename = "figures/volcanoPlots/VP/VP_CTvsAR.tiff", 
       width = 5.5, 
       height = 4.5, 
       res = 300, 
       units = "in")
  
  print(volcanoplot(fit = fit_eb, 
                    coef = 3, 
                    highlight = 5, 
                    names = symbols, 
                    col = "firebrick4", 
                    main = paste("Differentially expressed genes", 
                                 colnames(contrast_matrix)[3], sep = "\n")), 
        abline(v = c(-1, 1)))
  
  dev.off()
  
  
  # 4) CT vs DHA (Control vs DHA-Suplemented Diet)
  
  tiff(filename = "figures/volcanoPlots/VP/VP_CTvsDHA.tiff", 
       width = 5.5, 
       height = 4.5, 
       res = 300, 
       units = "in")
  
  print(volcanoplot(fit = fit_eb, 
                    coef = 4, 
                    highlight = 4, 
                    names = symbols, 
                    col = "firebrick4", 
                    main = paste("Differentially expressed genes", 
                                 colnames(contrast_matrix)[4], 
                                 sep = "\n")), 
        abline(v = c(-1, 1)))
  
  dev.off()
  
  
  # 5) CT vs DR (Control vs Diet-Restriction)
  
  tiff(filename = "figures/volcanoPlots/VP/VP_CTvsDR.tiff", 
       width = 5.5, 
       height = 4.5, 
       res = 300, 
       units = "in")
  
  print(volcanoplot(fit = fit_eb, 
                    coef = 5, 
                    highlight = 5, 
                    names = symbols, 
                    col = "firebrick4", 
                    main = paste("Differentially expressed genes", 
                                 colnames(contrast_matrix)[5], 
                                 sep = "\n")), 
        abline(v = c(-1, 1)))
  
  dev.off()
  
  
  # 6) CT vs EFA (Control vs EFA-Deficient Diet)
  
  tiff(filename = "figures/volcanoPlots/VP/VP_CTvsEFA.tiff", 
       width = 5.5, 
       height = 4.5, 
       res = 300, 
       units = "in")
  
  print(volcanoplot(fit = fit_eb, 
                    coef = 6, 
                    highlight = 5, 
                    names = symbols, 
                    col = "firebrick4",
                    main = paste("Differentially expressed genes", 
                                 colnames(contrast_matrix)[6], 
                                 sep = "\n")),
        abline(v = c(-1, 1)))

  dev.off()
  

  # 7) CT vs HF (Control vs High fat Diet)
  
  tiff(filename = "figures/volcanoPlots/VP/VP_CTvsHF.tiff", 
       width = 5.5, 
       height = 4.5, 
       res = 300, 
       units = "in")
  
  print(volcanoplot(fit = fit_eb, 
                    coef = 7, 
                    highlight = 5, 
                    names = symbols, 
                    col = "firebrick4",
                    main = paste("Differentially expressed genes", 
                                 colnames(contrast_matrix)[7], 
                                 sep = "\n")), 
        abline(v = c(-1, 1)))
  
  dev.off()
  
  
  # 8) CT vs LAR (Control vs Diet used in LAR)
  
  tiff(filename = "figures/volcanoPlots/VP/VP_CTvsLAR.tiff", 
       width = 5.5, 
       height = 4.5, 
       res = 300, 
       units = "in")
  
  print(volcanoplot(fit = fit_eb, 
                    coef = 8, 
                    highlight = 4, 
                    names = symbols, 
                    col = "firebrick4",
                    main = paste("Differentially expressed genes", 
                                 colnames(contrast_matrix)[8], sep = "\n")), 
        abline(v = c(-1, 1)))
  
  dev.off()
  
}

# ---------------------------------------------------------------------------------------------------------------------------------------------------

# Comparaciones múltiples

test_results <- decideTests(object = fit_eb, 
                            method = "separate", 
                            adjust.method = "fdr", 
                            p.value = 0.1, 
                            lfc = 1)

sum_res_rows <- apply(X = abs(test_results), 
                      MARGIN = 1, 
                      FUN = sum)

res_selected <- test_results[sum_res_rows != 0, ]
summary(res_selected)

write.csv(x = summary(res_selected), 
          file = "results/multipleComparison/multipleComparison.csv")

# ---------------------------------------------------------------------------------------------------------------------------------------------------

# Heatmap

dir.create("figures/heatMaps")

probes_in_heatmap <- rownames(res_selected)
HM_data <- exprs(norm_filtered_data)[rownames(exprs(norm_filtered_data)) %in% probes_in_heatmap, ]

gene_symbols <- select(x = mouse4302.db, 
                       keys = rownames(HM_data), 
                       columns = "SYMBOL")

symbols <- gene_symbols$SYMBOL
rownames(HM_data) <- symbols

write.csv(x = HM_data, 
          file = file.path("./results/data4Heatmap.csv"))

my_palette <- colorRampPalette(brewer.pal(9, "RdBu"))(100)

tiff(filename = "figures/heatMaps/heatmap.tiff", 
     width = 5.5, 
     height = 6, 
     res = 300, 
     units = "in")

par(cex.main = 0.85, cex.lab = 0.8, cex.axis = 0.5)
heatmap.2(x = HM_data,
          Rowv = T,
          Colv = T,
          main = "Differentially expressed genes \n FDR < 0.1, logFC >= 1",
          scale = "row",
          margins = c(3, 5), 
          col = my_palette,
          sepcolor = "white",
          sepwidth = c(0.05, 0.05), 
          cexRow = 0.4,
          cexCol = 0.6,
          key = T, 
          keysize = 1.2, 
          key.title = "",
          density.info = "histogram",
          ColSideColors = c(rep("#440154FF", 3), 
                            rep("#453781FF", 2), 
                            rep("#33638DFF", 3),
                            rep("#238A8DFF", 3),
                            rep("#20A387FF", 3),
                            rep("#55C667FF", 3),
                            rep("#B8DE29FF", 3),
                            rep("#FDE725FF", 3),
                            rep("black", 3)),
          tracecol = NULL, 
          dendrogram = "both",
          srtCol = 90, 
          las = 1)

dev.off()

# ---------------------------------------------------------------------------------------------------------------------------------------------------

# Diagramas de Venn

dir.create("figures/VennPlots")

# 1) CT-FR, CT-EFA, CT-DHA

if (dir.exists("figures/VennPlots/")){
  
# All

tiff(filename = "figures/VennPlots/VPCluster2.1_all.tiff", 
     width = 5.5, 
     height = 5, 
     res = 300, 
     units = "in")

print(vennDiagram(object = res_selected[ , c(1, 4, 6)], 
                  cex = 0.9, 
                  circle.col = c("indianred2", "gold", "lightskyblue"), 
                  lwd = 1.5, 
                  include = "both"), 
      title("Genes in common (all) between the three comparisons\n Genes selected with FDR < 0.1 and logFC > 1",
      cex.main = 0.9))

dev.off()

# Up

tiff(filename = "figures/VennPlots/VPCluster2.1_up.tiff", 
     width = 5.5, 
     height = 5, 
     res = 300, 
     units = "in")

print(vennDiagram(object = res_selected[ , c(1, 4, 6)], 
                  cex = 0.9, 
                  circle.col = c("indianred2", "gold", "lightskyblue"), 
                  lwd = 1.5, 
                  include = "up"), 
      title("Genes in common (up) between the three comparisons\n Genes selected with FDR < 0.1 and logFC > 1",
      cex.main = 0.9))

dev.off()

# Down

tiff(filename = "figures/VennPlots/VPCluster2.1_down.tiff", 
     width = 5.5, 
     height = 5, 
     res = 300, 
     units = "in")

print(vennDiagram(object = res_selected[ , c(1, 4, 6)], 
                  cex = 0.9, 
                  circle.col = c("indianred2", "gold", "lightskyblue"), 
                  lwd = 1.5, 
                  include = "down"), 
      title("Genes in common (down) between the three comparisons\n Genes selected with FDR < 0.1 and logFC > 1",
      cex.main = 0.9))

dev.off()

}

# 2) CT-AC, CT-LAR, CT-HF

if (dir.exists("figures/VennPlots/")){
  
  # All
  
  tiff(filename = "figures/VennPlots/VPCluster1.1_all.tiff", 
       width = 5.5, 
       height = 5, 
       res = 300, 
       units = "in")
  
  print(vennDiagram(object = res_selected[ , c(2, 7, 8)], 
                    cex = 0.9, 
                    circle.col = c("indianred2", "gold", "lightskyblue"), 
                    lwd = 1.5, 
                    include = "both"), 
        title("Genes in common (all) between the three comparisons\n Genes selected with FDR < 0.1 and logFC > 1",
              cex.main = 0.9))
  
  dev.off()
  
  # Up
  
  tiff(filename = "figures/VennPlots/VPCluster1.1_up.tiff", 
       width = 5.5, 
       height = 5, 
       res = 300, 
       units = "in")
  
  print(vennDiagram(object = res_selected[ , c(2, 7, 8)], 
                    cex = 0.9, 
                    circle.col = c("indianred2", "gold", "lightskyblue"), 
                    lwd = 1.5, 
                    include = "up"), 
        title("Genes in common (up) between the three comparisons\n Genes selected with FDR < 0.1 and logFC > 1",
              cex.main = 0.9))
  
  dev.off()
  
  # Down
  
  tiff(filename = "figures/VennPlots/VPCluster1.1_down.tiff", 
       width = 5.5, 
       height = 5, 
       res = 300, 
       units = "in")
  
  print(vennDiagram(object = res_selected[ , c(2, 7, 8)], 
                    cex = 0.9, 
                    circle.col = c("indianred2", "gold", "lightskyblue"), 
                    lwd = 1.5, 
                    include = "down"), 
        title("Genes in common (down) between the three comparisons\n Genes selected with FDR < 0.1 and logFC > 1",
              cex.main = 0.9))
  
  dev.off()

}

# ------------------------------------------------------------------------------------------------------------------------------------------------

# Análisis de pathways

dir.create("results/pathwayAnalysis")
dir.create("results/pathwayAnalysis/enrichedPathwayTables")
dir.create("figures/barPlots")
dir.create("figures/cnetPlots")

list_of_tables <- list(CTvsFR = top_table_CTvsFR, 
                       CTvsAC  = top_table_CTvsAC,
                       CTvsAR = top_table_CTvsAR,
                       CTvsDR = top_table_CTvsDR,
                       CTvsEFA = top_table_CTvsEFA,
                       CTvsHF = top_table_CTvsHF,
                       CTvsLAR = top_table_CTvsLAR)

list_of_selected <- list()

for (i in 1:length(list_of_tables)){

  # select the toptable
  
  top_tab <- list_of_tables[[i]]
  
  # select the genes to be included in the analysis
  
  which_genes <- top_tab[top_tab$adj.P.Val < 0.15, ]
  selected_ids <- rownames(which_genes)
  
  # convert the ID to Entrez
  
  entrez_ids <- select(x = mouse4302.db, keys = selected_ids, columns = c("ENTREZID"))
  entrez_ids <- entrez_ids$ENTREZID
  list_of_selected[[i]] <- entrez_ids
  names(list_of_selected)[i] <- names(list_of_tables)[i]
  
}

sapply(list_of_selected, length)

mapped_genes2GO <- mappedkeys(x = org.Mm.egGO)
mapped_genes2KEGG <- mappedkeys(x = org.Mm.egPATH)

mapped_genes <- union(x = mapped_genes2GO, 
                      y = mapped_genes2KEGG)

list_of_data <- list_of_selected
comparisons_names <- names(list_of_data)
universe <- mapped_genes

for (i in 1:length(list_of_data)){
  
  logFC <- list_of_tables[[i]]$logFC[list_of_tables[[i]]$adj.P.Val < 0.15]
  names <- list_of_selected[[i]]
  vec <- setNames(logFC, names)
  
  genes_in <- list_of_data[[i]]
  comparison <- comparisons_names[i]
  enrich_result <- enrichPathway(gene = genes_in, 
                                 pvalueCutoff = 0.05,
                                 readable = T,
                                 pAdjustMethod = "fdr",
                                 organism = "mouse",
                                 universe = universe)
  
  enrich_result <- setReadable(x = enrich_result, OrgDb = org.Mm.eg.db, keyType = "ENTREZID")
  
  cat("##################################")
  cat("\nComparison: ", comparison, "\n")
  print(head(enrich_result))
  
if (length(rownames(enrich_result@result)) != 0){
    
    write.csv(as.data.frame(enrich_result), 
              file = paste0("results/pathwayAnalysis/enrichedPathwayTables/", "ReactomePA.Results.", comparison, ".csv"), 
              row.names = FALSE)
    
    tiff(filename = paste0("figures/barPlots/", "ReactomePABarplot.", comparison, ".tiff"), 
              width = 15, 
              height = 7, 
              res = 300, 
              units = "in")
    
    print(barplot(height = enrich_result, 
                  showCategory = 4, 
                  font.size = 8.5, 
                  color = "p.adjust",  
                  title = paste0("Reactome Pathway Analysis for ", comparison, ". Barplot")))
    
    dev.off()
    
    if (i == 4 | i == 7){
      
      tiff(filename = paste0("figures/cnetPlots/", "ReactomePAcnetplot.", comparison, ".tiff"), 
           width = 7.5, 
           height = 7, 
           res = 300, 
           units = "in")
      
      print(cnetplot(x = enrich_result, 
                   node_label = "all", 
                   showCategory = 3, 
                   foldChange = vec, 
                   layout = "kk", 
                   circular = F))
      
      dev.off()
      
    } else {
      
      tiff(filename = paste0("figures/cnetPlots/", "ReactomePAcnetplot.", comparison, ".tiff"), 
           width = 7.5, 
           height = 7, 
           res = 300, 
           units = "in")
      
      print(cnetplot(x = enrich_result, 
                     node_label = "all", 
                     showCategory = 4, 
                     foldChange = vec, 
                     layout = "kk", 
                     circular = F))
    
      dev.off()
  
    }
  }
}
